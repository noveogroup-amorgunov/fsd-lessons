# Feature Sliced Design for LLM Code Assistants

This guide outlines the core principles and patterns for working with feature Sliced Design, a architecture methodology for frontend JavaScript/TypeScript applications. It's designed to help LLM code assistants understand and generate high-quality code.

TODO WRITE

## Core Concepts

# Reatom for LLM Code Assistants

This guide outlines the core principles and patterns for working with Reatom, a state management library for JavaScript/TypeScript applications. It's designed to help LLM code assistants understand and generate high-quality Reatom code.

Version: `@reatom/core@alpha` (`@reatom/core@1000`).

## Core Concepts

### Atoms

Atoms are the fundamental building blocks in Reatom, representing individual pieces of state.

```ts
// Creating an atom with an initial value
const counter = atom(0, 'counter') // Second parameter is the name (recommended for debugging)

// Reading the state
const value = counter() // Returns 0

// Updating the state
counter(5) // Sets value to 5
counter((prev) => prev + 1) // Updates using a function, returns 6
```

### Computed Values and Laziness

Computed atoms derive their value from other atoms, automatically tracking dependencies. Importantly, Reatom implements **lazy evaluation** - computed atoms only recalculate when their value is actually read.

```ts
// Creating a computed atom
const doubledCounter = computed(() => counter() * 2, 'doubledCounter')

// Reading the computed value
const value = doubledCounter() // Returns 12 (based on counter being 6)

// The computation only runs when atom is subscribed
// If doubledCounter() has no subscription, the computation never runs
```

### Subscription

Atoms and computed values can be subscribed to for reactive updates:

```ts
// Subscribe to changes (first call happens immediately)
const unsubscribe = counter.subscribe((value) => {
  console.log('Counter changed:', value)
})

// Later, to stop receiving updates:
unsubscribe()
```

### Actions

Actions encapsulate complex logic, side effects, and business rules. They should be used for operations that go beyond simple state updates.

```ts
// Creating an action for complex operations
const fetchAndUpdateCounter = action(async (userId) => {
  // Complex logic with side effects
  const response = await wrap(fetch(`/api/users/${userId}/count`))
  const data = await wrap(response.json())

  // Update multiple atoms
  counter(data.count)
  lastUpdated(new Date())

  return data
}, 'fetchAndUpdateCounter')

// Calling the action
fetchAndUpdateCounter('user123')
```

**Important**: Don't use actions for simple value propagation. This is a bad practice:

```ts
// ❌ BAD: Using action for simple state update
const setCounter = action((value) => {
  counter(value)
}, 'setCounter')

// ✅ GOOD: Use the atom directly
counter(5) // Direct update is simpler and more efficient
```

Actions are best used when you need to:

1. Orchestrate multiple state changes
2. Perform side effects (API calls, localStorage, etc.)
3. Implement complex business logic

## Atomization Pattern

Reatom encourages the "atomization" pattern - representing mutable properties as individual atoms:

```ts
// ❌ BAD: state holds multiple editable properties
const user = atom({ id: '1', name: 'Alice', email: 'alice@example.com' })

// ✅ GOOD: separate editable properties to individual atoms
const name = atom('Alice', 'name')
const email = atom('alice@example.com', 'email')

// Structure can be composed:
const user = { id: '1', name, email }

// Direct updates are efficient:
name('Bob') // Only updates the name atom
```

## Extension System

Reatom uses an extension system to enhance atoms and actions with additional functionality.

### Adding Methods to Atoms

Use the `.actions()` method to add related methods to an atom:

```ts
const counter = atom(0, 'counter').actions((target) => ({
  increment: (amount = 1) => target((prev) => prev + amount),
  decrement: (amount = 1) => target((prev) => prev - amount),
  reset: () => target(0),
}))

// Using the methods
counter.increment(5)
counter.decrement()
counter.reset()
```

## Async Operations

Reatom provides extensions for handling asynchronous operations:

```ts
// Using withAsync extension
const sendForm = action(async (formData) => {
  await wrap(api.submitForm(formData))
}, 'fetchData').extend(withAsync())
sendForm.ready() // `false` when pending, `true` by default
sendForm.error() // `undefined` by default
```

Using `withAsync` for data fetching probably antipattern, it is match suitable for "put" / "post" / "delete" requests. For data fetching use async computed and `withAsyncData`.

```ts
// Using withAsyncData to store the result
const userData = computed(async () => {
  const id = userId()
  const response = await wrap(fetch(`/api/users/${id}`))
  return await wrap(response.json())
}, 'userData').extend(withAsyncData(null))

// Access data and loading state
const data = userData.data() // `null` by default, as the second argument of `withAsyncData` "initState" is not provided
const isLoading = !userData.ready() // `false` when pending, `false` by default (before the first fetch)
const error = userData.error()
```

## Context Preservation

Use `wrap()` to preserve reactive context across async boundaries, like promises and functions:

```ts
const results = atom([])
const fetchAndProcess = action(async () => {
  // ❌ BAD: The context is lost after the await
  const data = await fetch('/api/data').then((r) => r.json())
  results(data) // will throw missed context

  // ❌ BAD: Wrapped promise shouldn't be chained
  const data = await wrap(fetch('/api/data')).then((r) => r.json())
  results(data) // will throw missed context

  // ✅ GOOD: await used on a wrapped promise
  const data = await wrap(fetch('/api/data').then((r) => r.json()))
  results(data) // will work

  // ❌ BAD: The context is lost in async function call
  fetch('/api/data')
    .then((r) => r.json())
    .then((data) => {
      results(data) // will throw missed context
    })

  // ✅ GOOD: the result atom processed in wrapped function
  fetch('/api/data')
    .then((r) => r.json())
    .then(
      wrap((data) => {
        results(data) // will work
      }),
    )
})
```

## Framework Integration

Reatom integrates with popular UI frameworks:

### React

`reatomComponent` - is a computed atom with React component, it allows you to use atoms directly in JSX, but the render function works just like regular React component, it is ok to use hooks and accept some props.

```tsx
const UserProfile = reatomComponent<{ className?: string }>(({ className }) => {
  const [t] = useTranslation()
  return (
    <div className={className}>
      <p>
        {t('name')}: {user.name()}
      </p>
      <p>
        {t('email')}: {user.email()}
      </p>
    </div>
  )
})
```

> Note: do NOT create atoms inside render function, atom reference should be stable.

## Best Practices

IMPORTANT:

1. **Name your atoms and actions** for better debugging (second parameter), do not prefix "Atom" or "Action", call atoms and actions as regular variables and functions. Own atoms and actions factories name should starts with `reatom*`, like `reatomDialog` or `reatomTimer`, it should accept its variable name and use it in internal atoms name, like `const count = atom(0, name + '.count')`.
2. **Use atomization** for complex state structures, each individual editable pease of state should be an atom, it can be even nested.
3. **Prefer computed atoms** over deriving data in components.
4. **Use extensions** for cross-cutting concerns.
5. **Preserve context** with `wrap()` in async operations and functions.
6. **Group related state and actions** around main atom or action with `extend`.

## Common Patterns

### Form Handling with Atomization

Following the atomization pattern for forms provides better performance and flexibility:

```ts
import { atom, computed, action, parseAtoms, wrap } from '@reatom/core'

// ✅ GOOD: Atomized form fields
const username = atom('', 'username')
const email = atom('', 'email')
const password = atom('', 'password')

// Validation for individual fields
const isUsernameValid = computed(() => username().length > 0, 'isUsernameValid')
const isEmailValid = computed(() => email().includes('@'), 'isEmailValid')
const isPasswordValid = computed(
  () => password().length >= 8,
  'isPasswordValid',
)

// Overall form validation
const isFormValid = computed(
  () => isUsernameValid() && isEmailValid() && isPasswordValid(),
  'isFormValid',
)

// Form submission action
const submitForm = action(async () => {
  if (!isFormValid()) return

  // Use parseAtoms to extract values from atoms
  const formData = parseAtoms({
    username,
    email,
    password,
  })

  await wrap(api.register(formData))

  // Reset form after submission
  username('')
  email('')
  password('')

  navigate('/')
}, 'submitForm')
```

This approach allows for:

- Granular updates (only affected fields re-render)
- Field-level validation
- Easier integration with UI components

### Real-world Todo App Example

Here's a more realistic example of a todo application using Reatom:

```ts
// FILE: app.tsx
import {
  atom,
  computed,
  action,
  reatomEnum,
  wrap,
  withChangeHook,
  withInit,
} from '@reatom/core'
import type { Atom, Action, Computed } from '@reatom/core'
import { reatomComponent } from '@reatom/react'

// Define the Todo type
interface Todo {
  id: string

  // atomize editable properties
  text: Atom<string>
  completed: Atom<boolean>
  visible: Computed<boolean>

  // atomization supposed to include relative actions too
  toggle: Action
  remove: Action
}

const newTodoText = atom('', 'newTodoText')
  // additional features
  .extend(
    withInit((state) => localStorage.getItem('newTodoText') || state),
    withChangeHook((state) => localStorage.setItem('newTodoText', state)),
  )

const filter = reatomEnum(['all', 'active', 'completed'], 'filter')

const todos = atom<Todo[]>([], 'todos')
  .actions((target) => ({
    create() {
      const description = newTodoText().trim()
      if (!description) return

      const id = Date.now().toString()

      const name = `${target.name}#${id}`

      const text = atom(description, `${name}.text`)

      const completed = atom(false, `${name}.completed`)

      const visible = computed(
        () =>
          filter() === 'all' ||
          (filter() === 'active' && !completed()) ||
          (filter() === 'completed' && completed()),
        `${name}.visible`,
      )

      const toggle = action(
        () => completed((current) => !current),
        `${name}.toggle`,
      )

      const remove = action(
        () => target((current) => current.filter((todo) => todo.id !== id)),
        `${name}.remove`,
      )

      const todo = {
        id,
        text,
        completed,
        visible,
        toggle,
        remove,
      }

      target((current) => [...current, todo])
      newTodoText('')
    },

    clearCompleted() {
      target((current) => current.filter((todo) => !todo.completed()))
    },
  }))
  // assign relative properties
  .extend((target) => ({
    activeCount: computed(
      () => target().filter((todo) => !todo.completed()).length,
      `${target.name}.activeCount`,
    ),
    completedCount: computed(
      () => target().filter((todo) => todo.completed()).length,
      `${target.name}.completedCount`,
    ),
  }))

const Task = reatomComponent<{ task: Todo }>(({ task }) => {
  if (!task.visible()) return null

  return (
    <li key={task.id}>
      <input
        type="checkbox"
        checked={task.completed()}
        onChange={wrap(task.toggle)}
      />
      <span
        style={{
          textDecoration: task.completed() ? 'line-through' : 'none',
        }}
      >
        {task.text()}
      </span>
      <button onClick={wrap(task.remove)}>×</button>
    </li>
  )
})

const TodoApp = reatomComponent(() => {
  return (
    <div>
      <form
        onSubmit={wrap((e) => {
          e.preventDefault()
          todos.create()
        })}
      >
        <h1>Todos</h1>
        <input
          value={newTodoText()}
          onChange={wrap((e) => newTodoText(e.target.value))}
          placeholder="What needs to be done?"
        />
      </form>

      <ul>
        {todos().map((task) => (
          <Task key={task.id} task={task} />
        ))}
      </ul>

      <footer>
        <div>{todos.activeCount()} items left</div>
        <div>
          <button onClick={wrap(filter.setAll)}>All</button>
          <button onClick={wrap(filter.setActive)}>Active</button>
          <button onClick={wrap(filter.setCompleted)}>Completed</button>
        </div>
        <div>{todos.completedCount()} items completed</div>
        <button onClick={wrap(todos.clearCompleted)}>Clear completed</button>
      </footer>
    </div>
  )
})

// FILE: debug.ts
import { connectLogger } from '@reatom/core'
connectLogger()

// FILE: main.tsx
import ReactDOM from 'react-dom/client'
import { reatomContext } from '@reatom/react'
import { context, clearStack } from '@reatom/core'
import './debug' // import before the whole other code!

clearStack() // reset default context in the app root to force `wrap` usage

const root = ReactDOM.createRoot(document.getElementById('root')!)
root.render(
  <reatomContext.Provider value={context.start()}>
    <TodoApp />
  </reatomContext.Provider>,
)

```

### Data Fetching with Auto-Cancellation

The auto-cancellation feature is a powerful aspect of Reatom's async handling which is added by `withAbort` which is included in `withAsyncData`:

```ts
import { atom, computed, withAsyncData, wrap, sleep } from '@reatom/core'

const query = atom('', 'query')

const suggestions = computed(async () => {
  const searchQuery = query()
  if (searchQuery.length < 2) return []

  // Debounce (wrap will throw abort if the query will changed before the debounce is over)
  await wrap(sleep(350))

  // Simulate an API call
  const response = await wrap(fetch(`/api/suggestions?q=${searchQuery}`))
  if (!response.ok)
    throw new Error(`Failed to fetch suggestions for "${searchQuery}"`)
  return await wrap(response.json())
}, 'suggestions').extend(withAsyncData(null, [])) // Initial data is an empty array

// When query changes, previous fetch is automatically cancelled
query('Reatom')

suggestions.data() // The array of suggestions from the API.
```

1. **How it works**: When a dependency (like `query`) changes, Reatom automatically aborts any pending async operations from previous computations before they complete.

2. **Why it's important**: This prevents race conditions and stale data. Without auto-cancellation, if you quickly change `query` multiple times, you might get responses in an unpredictable order, potentially showing outdated data.

3. **Benefits**:
   - Prevents memory leaks
   - Ensures UI always shows data from the most recent request
   - Reduces unnecessary network traffic
   - Eliminates the need for manual cleanup code

### `take`: Awaiting State Changes

The `take` function allows you to `await` the next update of an atom or the next call of an action within an async function. It's a shortcut for subscribing and immediately unsubscribing after the first event.

> `take` respects Reatom's abort context and will throw an `AbortError` if the context is aborted (e.g., by `withAbort` or `withAsyncData`). This enables writing redux-saga-like procedural logic using `async/await`.

**Example: Async Validation Loop**

```ts
import { atom, action, take, wrap } from '@reatom/core'

// Assume formData atom and validate function exist
const formData = atom({ value: '', error: null }, 'formData')
const validate = (data: { value: string }) =>
  data.value.length > 3 ? null : 'Too short'

export const submitWhenValid = action(async () => {
  let error = validate(formData())

  while (error) {
    // Wait for the *next* change in formData
    await wrap(take(formData)) // Use wrap!
    // Re-validate after the change
    error = validate(formData())
  }
  // Proceed with submission logic...
}, 'submitWhenValid')
```

**Example: Confirming Navigation (Awaiting Action)**

```ts
import { atom, action, take, wrap, withConnectHook } from '@reatom/core'
// Assume historyAtom and confirmModal (with open/close actions) exist
declare const historyAtom: any
declare const confirmModal: {
  isOpen: Atom<boolean>
  open: Action<[title: string, message: string], void>
  close: Action<[confirmed: boolean], boolean>
}

const form = atom({ isDirty: false, isSubmitted: false }, 'form').extend(
  withConnectHook(() => {
    const unblock = historyAtom.block(
      async ({ retry }: { retry: () => void }) => {
        if (form().isDirty && !form().isSubmitted && !confirmModal.isOpen()) {
          confirmModal.open('Leave page?', 'Unsaved changes.')

          // Wait for the modal's close action payload
          const confirmed = await wrap(take(confirmModal.close))

          if (confirmed) {
            unblock()
            retry()
          }
        } else {
          retry()
        }
      },
    )
    return unblock
  }),
)
```

Use `take` to coordinate async workflows based on state changes or action calls, simplifying complex sequences. Remember `wrap()`.

### Debugging

```ts
// Enable detailed logging
import { connectLogger } from '@reatom/core'
connectLogger()

// Now all atom updates and action calls will be logged to console
```

## Creating Custom Extensions

You can create your own extensions to add reusable functionality to atoms and actions. **Important**: Always use the built-in `withMiddleware` helper for middleware extensions. For assigner extensions, simply return the object to assign directly from the extension function.

### Creating an Assigner Extension

Assigner extensions add properties or methods to atoms by returning an object from the extension function.

```ts
import {
  AtomLike,
  AtomState,
  Action,
  // AtomState, // Duplicate import removed
  action,
  Ext,
  Atom, // Added Atom for better type hint in example
} from '@reatom/core'

// Extension that adds a reset method to atoms
const withReset = <TAtom extends Atom>( // Use Atom for better type inference
  initState: AtomState<TAtom>,
): Ext<TAtom, { reset: Action<[], AtomState<TAtom>> }> => {
  // Specify Action payload type
  // Return the extension function
  return (target) => ({
    // Return an object with properties to be assigned to the target
    reset: action(() => target(initState), `${target.name}.reset`), // Use initState from closure
  })
}

// Usage
const counter = atom(0, 'counter').extend(withReset(0))
counter(5)
counter.reset() // Resets to 0
```

### Creating a Middleware Extension

Middleware extensions can intercept and modify atom/action behavior:

```ts
import { AtomLike, Ext, withMiddleware } from '@reatom/core'

// Extension that logs all updates to an atom
interface LoggerOptions {
  prefix?: string
}

const withLogger = <T extends AtomLike>(
  options: LoggerOptions = {},
): Ext<T, T> => {
  const { prefix = 'LOG' } = options

  // Always use withMiddleware for behavior extensions
  return withMiddleware((target) => {
    // Return a middleware function
    return (next, ...params) => {
      console.log(`${prefix} [${target.name}] Before:`, params)
      const result = next(...params)
      console.log(`${prefix} [${target.name}] After:`, result)
      return result
    }
  })
}

// Usage
const counter = atom(0, 'counter').extend(withLogger({ prefix: 'DEBUG' }))
counter(5) // Logs before and after the update
```

### Extension Composition

Extensions can be composed together:

```ts
// Create a counter with multiple extensions
const counter = atom(0, 'counter').extend(
  withReset(0),
  withLogger(),
  withChangeHook((state, prevState) => {
    console.log(`Changed from ${prevState} to ${state}`)
  }),
)
```

Remember that Reatom's API is designed to be intuitive and composable. The core principles are:

1. State is stored in atoms
2. Computed values derive from atoms and are lazy
3. Actions encapsulate complex logic and side effects
4. Extensions enhance functionality through composition
5. Atomization improves performance and maintainability
6. Subscriptions enable reactive updates

## Context System

Reatom has a powerful context system that allows atoms and actions to run in isolated environments. It is inspired by "zone.js" and the concept of async context (`AsyncLocalStorage` in node.js). This is a critical feature for:

1. **Server-Side Rendering (SSR)**: Each request needs its own isolated state.
2. **Testing**: Tests need to run with clean, isolated state.
3. **Abort propagation**: `withAbort` and `withAsyncData` allows actions and atoms to run in a concurrent way.
4. **Debug stack traces**: Reatom logger and debugger can track the whole dependencies tree of running atoms and actions.

To archive this, Reatom uses a global variable under the hood to follow the current execution context. To track this context properly for all async boundaries, like functions and promises, a user code should use the `wrap` method.

Reatom provides default context out of the box which allow user to not use `wrap` at all, but it is recommended to avoid this behavior. To turn off the default context `clearStack` should be called in the beginning of the app.

### Using Different Contexts

To run code in a separate context, use the `root.start()` method:

```ts
// Run a function in a new isolated context
const result = root.start(() => {
  // All atom operations here happen in an isolated context
  counter(5)
  return counter()
})
```

This is particularly useful for:

```ts
// In testing
test('counter increments', () =>
  root.start(() => {
    // Each test runs in its own isolated context
    counter(0)
    counter.increment()
    expect(counter()).toBe(1)
  }))

// In SSR
app.get('/', (req, res) => {
  const html = root.start(() => {
    // Each request gets its own isolated state
    return renderApp()
  })
  res.send(html)
})
```

## References

- `getStackTrace`: Gets a formatted stack trace for debugging.
- `connectLogger`: Connects a logger to Reatom for debugging.
- `interface AsyncExt`: Extension interface for async operations, adding `ready`, `onFulfill`, `onReject`, `onSettle`, `pending`, and `error` properties.
- `type AsyncOptions`: Options for configuring async extensions.
- `withAsync`: Extension to add async handling capabilities to atoms and actions.
- `interface AsyncDataExt`: Extension interface for async data fetching, extending `AsyncExt` and adding a `data` atom.
- `withAsyncData`: Extension to handle async data fetching and store the result in a `data` atom.
- `interface ActionState`: Autoclearable array of processed events for actions.
- `interface Action`: Logic container with atom features, representing an action.
- `isAction`: Checks if a value is an action.
- `action`: Creates a new action.sion.
- `type ActionsExt`: Extension interface for adding multiple actions to an atom.
- `interface AtomLike`: Base interface for all atom-like entities (atoms, computed, actions).
- `interface Atom`: Base changeable state container.
- `interface Computed`: Derived state container.
- `isAtom`: Checks if a value is an atom.
- `isConnected`: Checks if an atom is connected (has subscribers).
- `named`: Generates a unique name for an atom or action.
- `computed`: Creates a new computed atom.
- `context`: The current execution context atom.
- `interface Ext`: Interface for an atom extension.
- `interface AssignerExt`: Extension interface for adding properties to atoms.
- `withMiddleware`: Extension to add middleware to an atom or action.
- `type TapExt`: Extension type for adding a tap hook to an atom.
- `withTap`: Extension to add a tap hook that is called after an atom's state changes.
- `interface ParamsExt`: Extension interface for adding parameters to an atom or action.
- `withParams`: Extension to add parameters to an atom or action.
- `interface AbortMethods`: Interface for methods related to aborting operations.
- `interface AbortAtom`: Atom that represents an abort signal.
- `abortVar`: Variable to manage the current abort atom in the context.
- `ifChanged`: Reacts to changes in a reactive atom within a computed context.
- `ifCalled`: Reacts to calls of an action within a reactive context.
- `isCausedBy`: Checks if an atom's update was caused by another atom.
- `peek`: Peeks at an atom's state without creating a dependency.
- `schedule`: Schedules a function to be executed in the effect queue.
- `take`: Returns a promise that resolves with the next state or payload of an atom or action.
- `findVar`: Finds a variable in the current frame or its publishers.
- `interface Variable`: Interface for an async context variable emulation.
- `variable`: Creates a new async context variable.
- `wrap`: Preserves reactive context across async boundaries.
- `interface AbortExt`: Extension interface for adding an `abort` method.
- `withAbort`: Extension to add abort functionality to atoms and actions.
- `withComputed`: Extension to add a computed derivation to an atom's state.
- `withInit`: Extension to initialize an atom's state.
- `withMemo`: Extension to memoize an atom's state based on a comparison function.
- `withChangeHook`: Extension to add a hook that is called when an atom's state changes.
- `addChangeHook`: Adds a change hook to an atom and returns an unsubscribe function.
- `withCallHook`: Extension to add a hook that is called when an action is called.
- `addCallHook`: Adds a call hook to an action and returns an unsubscribe function.
- `type SuspenseExt`: Extension type for adding a `suspended` computed atom.
- `withSuspense`: Extension to add suspense capabilities to an atom.
- `suspense`: Gets the settled value of an atom with suspense.
- `type ParseAtoms`: Recursively unwraps atoms and linked list nodes from a type.
- `parseAtoms`: Recursively unwraps atoms and linked list nodes from a value.
- `interface ArrayAtom`: Atom with methods for manipulating an array state.
- `reatomArray`: Creates an atom with an array state and array manipulation methods.
- `interface BooleanAtom`: Atom with methods for manipulating a boolean state.
- `reatomBoolean`: Creates an atom with a boolean state and boolean manipulation methods.
- `type EnumAtom`: Atom with methods for managing an enum state.
- `reatomEnum`: Creates an atom with an enum state and enum manipulation methods.
- `type LLNode`: Type for a node in a linked list.
- `interface LinkedList`: Interface for a linked list state.
- `interface LinkedListLikeAtom`: Atom-like interface for a linked list atom.
- `interface LinkedListAtom`: Atom with methods for manipulating a linked list state.
- `reatomLinkedList`: Creates an atom with a linked list state and linked list manipulation methods.
- `interface MapAtom`: Atom with methods for manipulating a Map state.
- `reatomMap`: Creates an atom with a Map state and Map manipulation methods.
- `interface NumberAtom`: Atom with methods for manipulating a number state.
- `reatomNumber`: Creates an atom with a number state and number manipulation methods.
- `interface RecordAtom`: Atom with methods for manipulating a Record state.
- `reatomRecord`: Creates an atom with a Record state and Record manipulation methods.
- `interface SetAtom`: Atom with methods for manipulating a Set state.
- `reatomSet`: Creates an atom with a Set state and Set manipulation methods.
- `type StringAtom`: Atom with a method for resetting a string state.
- `reatomString`: Creates an atom with a string state and a reset method.
